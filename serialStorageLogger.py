#!/usr/bin/python3
"""
CLI script for storing serial numbers generated by functions in serial.py to a SQL databse.
"""
import logging
import os
import sqlite3

storage_logger = logging.getLogger('main_logger.storage')
storage_logger.setLevel(logging.INFO)
storage_logger.propagate = True


def test_for_database(db_name):
    return os.path.exists(db_name)
    
def create_database(db_name):
    if os.path.splitext(db_name)[1] != '.db':
        print('Name has to end with ".db".')
        storage_logger.warning('invalid DB name supplied')
        return False
        #TODO: replace this branch with an error and a try/except(?)
    if not test_for_database(db_name):
        conn = sqlite3.connect(db_name)
        try:
            with conn:
                conn.execute('''create table prototypes 
                    (index_number integer primary key, 
                     serial_number varchar(25) not null,
                     name varchar(50))''')
                conn.execute('''create table components 
                    (index_number integer primary key, 
                     serial_number varchar(25) not null, 
                     name varchar(50))''')
                conn.execute('''create table experiments 
                    (index_number integer primary key, 
                     serial_number varchar(25) not null, 
                     name varchar(50))''')
                print('Database created successfully')
        except sqlite3.Error as e:
            storage_logger.error(e)
    else:
        storage_logger.warning('Database already exists')
        print('Database already exists')

def delete_database(db_name):
    if test_for_databse(db_name) and os.path.splitext(db_name)[1] == '.db':
        os.remove(db_name)
        storage_logger.info('Database {} removed'.format(db_name))
        print('Database {} removed.'.format(db_name))
    else:
        print('Can only be used to remove db files.')

def add_record(db_name, serial_type, serial_number, name=''):
    if not test_for_database(db_name):
        create_databse(db_name)
    conn = sqlite3.connect(db_name)
    try:
        with conn:
            if serial_type == 'prototype':
                conn.execute('insert into prototypes(serial_number, name) values (?, ?)', (serial_number, name))
            elif serial_type == 'component':
                conn.execute('insert into components(serial_number, name) values (?, ?)', (serial_number, name))
            elif serial_type == 'experiment':
                conn.execute('insert into experiments(serial_number, name) values (?, ?)', (serial_number, name))
            print('Record added')
            storage_logger.info('new record added: {}'.format(serial_number))
    except sqlite3.Error as e:
        storage_logger.error(e)
    
def delete_record(db_name, serial_type, serial_number):
    if test_for_database(db_name):
        conn = sqlite3.connect(db_name)
        try:
            with conn:
                if serial_type == 'prototype':
                    conn.execute('delete from prototypes where serial_number=?', (serial_number,))
                elif serial_type == 'component':
                    conn.execute('delete from components where serial_number=?', (serial_number,))
                elif serial_type == 'experiment':
                    conn.execute('delete from experiments where serial_number=?', (serial_number,))
                storage_logger.info('record added to db: {}'.format(serial_number))
        except sqlite3.Error as e:
            storage_logger.error(e)

def get_all_serialnumbers(db_name, serial_type):
    if test_for_database(db_name):
        conn = sqlite3.connect(db_name)
        try:
            with conn:
                if serial_type == 'prototype':
                    result = conn.execute('select * from prototypes')
                elif serial_type == 'component':
                    result = conn.execute('select * from components')
                elif serial_type == 'experiment':
                    result = conn.execute('select * from experiments')
            storage_logger.info('request for all serial numbers')
            return result.fetchall()
        except sqlite3.Error as e:
            storage_logger.error(e) 

def update_name(db_name, serial_type, serial_number, new_name):
    if test_for_database(db_name):
        conn = sqlite3.connect(db_name)
        try:
            with conn:
                if serial_type == 'prototype':
                    conn.execute('update prototypes set name=? where serial_number=?', (new_name, serial_number))
                elif serial_type == 'component':
                    conn.execute('update components set name=? where serial_number=?', (new_name, serial_number))
                elif serial_type == 'experiment':
                    conn.execute('update experiments set name=? where serial_number=?', (new_name, serial_number))
        except sqlite3.Error as e:
            storage_logger.error(e)


def summary_info(db_name, serial_type):
    if test_for_database(db_name):
        conn = sqlite3.connect(db_name)
        try:
            with conn:
                if serial_type == 'prototype':
                    result = conn.execute('select  count(serial_number) from prototypes')
                elif serial_type == 'component':
                    result = conn.execute('select count(serial_number) from components')
                elif serial_type == 'experiment':
                    result = conn.execute('select count(serial_number) from experiments')
                return result.fetchall()[0][0]
        except sqlite3.Error as e:
            storage_logger.error(e)


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('mode', type=str, choices=['setup', 'add'], help='Mode to run script in: db setup, or adding records to a db.')
    parser.add_argument('-d', '--database', default='serial.db', type=str, help='Name for database. Defaults to "serial.db".')
    parser.add_argument('-t', '--type', default='prototype', type=str, help='Type of serial number being added. Can be either prototype, component, or experiment. Defaults to prototype. Use with add mode.')
    parser.add_argument('-s', '--serial', type=str, help='Serial number being added. Use with add mode.')
    parser.add_argument('-n', '--name', type=str, default='', help='Name associated with serial number. Use with add mode.')
    args = parser.parse_args()
    if args.mode == 'setup':
        create_database(args.database)
    elif args.mode == 'add':
        add_record(args.database, args.type, args.serial, args.name)
        